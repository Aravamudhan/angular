Why angular ?
1. To create a dynamic website that is fast.
2. Helps organize javascript.
3. Easy to test
4. In traditional webpages, when a link is clicked the browser loads the entire webpage
with all the contents.
5. Angular is a client side JavaScript framework for adding interactivity to HTML.
6. Directives are used in angular to run or reference some javascript code.
Directives add interactivity/dynamic behavior to HTML.
7. Modules are where the application or pieces of our application is written. Modules
are the root of maintainability, readability and testability in angular. The dependencies
of our application is defined in modules. Using modules we can tell our application that this
module depends on some other module.
Example: var app = angular.module(‘store’,[]);
angular - The library
module - The module method
store - The name of the modules
[] - This is where dependencies are defined.
8. ngApp directive runs the given module when the application loads. For example, in the code
“<html ng-app=“store”></html>”, the ng-app attribute executes the “store” module.

Directives
1. Directives are how the behavior is bound to a web page in angular. Directives expresses
the behavior of the app too.
2. Dash in the HTML code is translated to camelCase in javascript.
3. Directives are attribute directives(to specify behaviors like tooltip) and element
directives(for widgets  etc).
4. Attribute directives are specified by "restrict:A" property, elements "restrit:E"
property in the directive method.

Expressions and curly braces
1. Expressions are how dynamic values are included in the angular applications.	
2. Double curly braces '{{}}' - writing stuff to HTML through expressions that evaluate to a value.
The expressions can be variables or constants.
3. Single curly braces '{}' -  Directives accepting objects as their arguments.
ng-style = "{'color':'black'}". 
4. No curly braces - Directives that accept single value arguments.

Controllers
1. Controllers help data to the html page. Controllers are where we define the app's behaviour through functions.
2. Wrapping the javascript in the controller inside a closure is a good habit.
The scope of the controller variables is only inside the DOM to which it is attached
(i.e.) a value set inside the controller(controller method) is only accessible to the DOM element
to which the controller is attached through, for example, ng-controller attribute.
Values can be set inside controllers such as "this.variable = 'value'".

Common directives
1. To attach a module to the page <html ng-app="store">
2. To attach a controller function <body ng-controller="StoreController as store">
3. To show a section based on expression <div class="details" ng-show="store.id">
4. To hide a section based on expression <div class="product" ng-hide="store.produce.soldOut">
5. To get all the values in an array <div ng-repeat="product in store.products">
6. ng-model enables two way data binding.

Summary
1. When the page referencing angular.js is loaded, it looks for the ngApp directive.
It bootstraps the application with the root DOM being the element on which ngApp is defined.
(Example) <html ng-app>
2. Angular uses kebab-case for custom attributes and camelCase for the directive that
implement them. Here ng-app is an attribute, ngApp is the directive that implements it.
3. Double curly braces-{{}} tell angular to evaluate the expression inside the braces and
insert the result into the DOM in place of the binding.
4. In the bootstrap phase
a) The injector that will be used for dependency injection is created.
b) The injector root scope that becomes context for the model of our application.
c) Angular compiles the DOM starting at the ngApp(root) element by processing directives and
bindings found along the way.
Once an application is bootstraped it waits for events such as incoming HTTP responses,
click events etc. When any event occurs, angular detects if it has caused any model changes.
If it finds any such such, then it will be reflected in the view by updating all the affected binding.\
5. View is the projection of model in angular. Whenever model changes, view is refreshed in the
appropriate binding points.
6. Scope is something that allows templates, model and view to work together. Any changes
in the model is reflected in the view, the any change in the view is reflected in the
model as well.
7. Scopes inherit starting from the root scope. Root scope is defined where ngApp directive
is marked. If any value is available in the root scope, that is available to all other
children scopes as well. Scopes are created automatically when the compiled HTML template
is executed.
8. Components enable code reuse. Without components there is a risk of model in a certain part
becoming available to some other part and modified unexpectedly is palpable. This is because
the scope is not isolated. Any thing created in the root scope, becomes available to the entire
application. When using components, angular creates isolate scope for each instance of components.
This removes the risk of prototypal inheritance(i.e.)the current scope inheriting from
its parent scopes. Component is created by using .component() method. Components are also
directives. Compoents are considered to be stripped down version of directives. Hence
the name should be in the camelCase and when refering to it in the html, kebab-case should be
used. Components can be reused in the app as well as across applications.
9. It is a best practice to assign methods and properties to the controller instances using this
instead of directly to the scope. By default $ctrl is an alias used by components to refer their
own scopes.
10. One feature per file, each entity in its own file, split the code into modules. A feature directory
should contain all the related entities, components, modules. This makes reusability seamless. The whole
feature directory can be copied to another application and re used.
11. The properties that begin with $$ are considered to be private. Should not be modified or accessed.
The $ prefix is used for the angular provided services. This should not be used for user defined services.
12. DI is the core of angular. Injector loads the module definitions. Module definitions have providers
registerd in them. When requested, these providers would create services and expose their APIs. A Provider
can be a provider of multiple services.
